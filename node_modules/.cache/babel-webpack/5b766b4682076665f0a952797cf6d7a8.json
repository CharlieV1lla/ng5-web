{"ast":null,"code":"import { gql } from 'apollo-angular';\nimport { Subscription } from 'rxjs'; //import { Component, OnInit, OnDestroy } from '@angular/core';\n\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"apollo-angular\"; //import { StorageService } from \"./storage.service\";\n\nconst TOKENAUTH = gql`\n  mutation TokenAuth($username: String!, $password: String!) {\n    tokenAuth(username: $username, password: $password) {\n      token\n    }\n  }\n`;\nconst LINKS = gql`\n  query Links {\n    links {\n      url\n      description\n    }\n  }\n`;\nconst LINKSPARAM = gql`\n  query Links($nombre: String!) {\n    links(nombre: $nombre) {\n      id\n      url\n      description\n      precio\n      postedBy {\n        username\n      }\n    }\n  }\n`;\nconst CREATELINK = gql`\n  mutation CreateLink($url: String!, $description: String!) {\n    createLink(url: $url, description: $description) {\n      id\n      url\n      description\n   }\n  }\n  `;\nexport let GraphqlProductsService = /*#__PURE__*/(() => {\n  class GraphqlProductsService {\n    constructor(apollo) {\n      this.apollo = apollo;\n      this.loading = false;\n      this.querySubscription = new Subscription();\n    }\n\n    links(valor) {\n      //alert(valor);\n      if (valor == \"-\") {\n        return this.apollo.watchQuery({\n          query: LINKS\n        });\n      } else {\n        //alert(valor);\n        return this.apollo.watchQuery({\n          query: LINKSPARAM,\n          variables: {\n            nombre: valor\n          }\n        });\n      }\n    }\n\n    createLink(mytoken, url, description) {\n      console.log(\"token auth = \" + mytoken);\n      return this.apollo.mutate({\n        mutation: CREATELINK,\n        variables: {\n          url: url,\n          description: description\n        },\n        context: {\n          // example of setting the headers with context per operation\n          headers: new HttpHeaders().set('Authorization', 'JWT ' + mytoken)\n        }\n      });\n    }\n\n  }\n\n  GraphqlProductsService.ɵfac = function GraphqlProductsService_Factory(t) {\n    return new (t || GraphqlProductsService)(i0.ɵɵinject(i1.Apollo));\n  };\n\n  GraphqlProductsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: GraphqlProductsService,\n    factory: GraphqlProductsService.ɵfac,\n    providedIn: 'root'\n  });\n  return GraphqlProductsService;\n})();","map":null,"metadata":{},"sourceType":"module"}